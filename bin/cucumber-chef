#!/usr/bin/env ruby

require 'thor'
require 'cucumber-chef'

class CucumberChef < Thor
  include Thor::Actions

  no_tasks do
    def create_directory_structure(project_dir)
      %w{step_definitions support}.each do |dir|
        FileUtils.mkdir_p(project_dir + "features" + dir)
      end
    end

    def initalize_config
      source_dir = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "cucumber", "chef", "templates", "cucumber-chef"))
      destination_dir = File.expand_path(File.join(Dir.pwd, ".cucumber-chef"))
      CucumberChef.source_root(source_dir)
      FileUtils.mkdir_p(destination_dir)

      templates = {
        "config-rb.erb" => "config.rb"
      }

      templates.each do |source, destination|
        template(source, File.join(destination_dir, destination))
      end
    end

    def generate_project_skeleton(project_dir)
      template_dir = File.expand_path(File.join(__FILE__, "..", "..", "lib", "cucumber", "chef", "templates", "cucumber"))

      CucumberChef.source_root template_dir.realpath
      templates = {
        "readme.erb" => 'README',
        "example_feature.erb" => 'features/example.feature',
        "example_step.erb" => 'features/step_definitions/example_step.rb',
        "env.rb" => "features/support/env.rb"
      }

      templates.each do |filename, destination|
        template(filename, project_dir + destination)
      end
    end

    def load_config
      options.test? ? Cucumber::Chef::Config.test : Cucumber::Chef::Config.load
    end

    def error(message)
      warn message
      exit 255
    end
  end

################################################################################

  desc "init", "Initalize Cucumber-Chef configuration"
  def init
    initalize_config
  end

  desc "setup", "Setup Cucumber-Chef test lab in Amazon EC2"
  method_option :test, :type  => :boolean
  def setup
    load_config

    test_lab = Cucumber::Chef::TestLab.new
    server = test_lab.create

    provisioner = Cucumber::Chef::Provisioner.new(server)
    provisioner.build

  rescue Cucumber::Chef::Error => e
    error(e.message)
  end

  desc "teardown", "Teardown Cucumber-Chef test lab in Amazon EC2"
  method_option :test, :type => :boolean
  def teardown
    load_config

    test_lab = Cucumber::Chef::TestLab.new
    test_lab.destroy

  rescue Cucumber::Chef::Error => e
    error(e)
  end

################################################################################

  desc "project <project name>" , "Create a project template for testing an infrastructure"
  def project(project_name)
    @project = project_name
    project_dir = File.expand_path(File.join(Dir.pwd, "cucumber-chef", @project))
    create_directory_structure(project_dir)
    generate_project_skeleton(project_dir)

  rescue Cucumber::Chef::Error => e
    error(e)
  end

  desc "ssh", "SSH to running test lab"
  method_option :test, :type => :boolean
  def ssh
    load_config

    if (test_lab = Cucumber::Chef::TestLab.new)
      if test_lab.labs_exist?
        ssh = Cucumber::Chef::SSH.new
        ssh.config[:host] = test_lab.labs_running.first.public_ip_address
        ssh.config[:ssh_user] = "ubuntu"
        ssh.config[:identity_file] = Cucumber::Chef::Config[:aws][:identity_file]
        puts("Attempting ssh connection to '#{ssh.config[:ssh_user]}@#{ssh.config[:host]}' with identity '#{ssh.config[:identity_file]}'.")
        ssh.console
      else
        puts("No test labs available to ssh to!")
      end
    end

  rescue Cucumber::Chef::Error => e
    error(e)
  end

  desc "connect", "Connect to a container in your test lab"
  def connect
    puts "Not implemented.  For now, find the IP of your test lab using the info task, and connect manually."
  end

  desc "displayconfig", "Display the current cucumber-chef config"
  method_option :test, :type  => :boolean
  def displayconfig
    load_config

    puts Cucumber::Chef::Config.configuration.to_yaml

  rescue Cucumber::Chef::Error => e
    error(e.message)
  end

  desc "info", "Display information about the current test labs"
  method_option :test, :type  => :boolean
  def info
    load_config

    if (test_lab = Cucumber::Chef::TestLab.new)
      test_lab.info
    end

  rescue Cucumber::Chef::Error => err
    error(err.message)
  end

#  desc "upload <project name>", "Upload the cucumber-chef test suite <project name> to the test lab platform"
#  def upload(project_name)
#    load_config
#
#    project_dir = File.expand_path(File.join(Dir.pwd, "cucumber-chef", project_name))
#    unless File.exists?(project_dir)
#      raise "Project dir '#{project_dir}' does not exist."
#    end
#
#    runner = Cucumber::Chef::TestRunner.new(project_dir)
#    runner.reset_project
#    runner.upload_project
#  end

  desc "test <project name>", "Run the cucumber-chef test suite <project name> from a workstation."
  def test(project_name)
    load_config

    project_dir = File.expand_path(File.join(Dir.pwd, "cucumber-chef", project_name))
    unless File.exists?(project_dir)
      raise "Project directory '#{project_dir}' does not exist."
    else
      puts "Using project directory: #{project_dir}"
    end

    runner = Cucumber::Chef::TestRunner.new(project_dir)
    runner.run

  rescue Cucumber::Chef::Error => e
    error(e)
  end

end

CucumberChef.start
