#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'

require 'thor'
require 'cucumber-chef'

class CucumberChef < Thor
  include Thor::Actions

  no_tasks do
    def create_directory_structure(project_dir)
      %w{step_definitions support}.each do |dir|
        FileUtils.mkdir_p(project_dir + "features" + dir)
      end
    end

    def generate_project_skeleton(project_dir)
      template_dir = Pathname.new(File.join(__FILE__, "../../lib/cucumber/chef/templates/cucumber")).expand_path

      CucumberChef.source_root template_dir.realpath
      templates = {
        "readme.erb" => 'README',
        "example_feature.erb" => 'features/example.feature',
        "example_step.erb" => 'features/step_definitions/example_step.rb',
        "env.rb" => "features/support/env.rb"
      }

      templates.each do |filename, destination|
        template(filename, project_dir + destination)
      end
    end

    def config
      @config ||= begin
        options.test? ? Cucumber::Chef::Config.test_config : Cucumber::Chef::Config.new
      end
    end

    def error(message)
      warn message
      exit 255
    end
  end

################################################################################

  desc "setup", "Setup Cucumber-Chef test lab in Amazon EC2"
  method_option :test, :type  => :boolean
  def setup
    config.verify
    test_lab = Cucumber::Chef::TestLab.new(config)
    server = test_lab.create

    provisioner = Cucumber::Chef::Provisioner.new(config, server)
    provisioner.build

  rescue Cucumber::Chef::Error => e
    error(e.message)
  end

  desc "teardown", "Teardown Cucumber-Chef test lab in Amazon EC2"
  method_option :test, :type => :boolean
  def teardown
    config.verify
    test_lab = Cucumber::Chef::TestLab.new(config)
    test_lab.destroy
  end

################################################################################

  desc "project <project name>" , "Create a project template for testing an infrastructure"
  def project(project_name)
    @project = project_name
    project_dir = Pathname.new(File.join(Dir.pwd, "cucumber-chef", @project)).expand_path
    #create_directory_structure(project_dir)
    generate_project_skeleton(project_dir)
  end

  desc "amis", "List available EC2 Ubuntu AMIs"
  def amis
    config.verify
    requested = [@config[:knife][:aws_instance_arch], @config[:knife][:aws_instance_disk_store], @config[:knife][:region]].compact.join(', ')
    puts("Available EC2 AMIs for Ubuntu Release '#{@config[:knife][:ubuntu_release]}' (#{requested}):")
    Ubuntu.release(@config[:knife][:ubuntu_release]).amis.each do |ami|
      puts "#{ami.region} #{ami.name} (#{ami.arch}, #{ami.root_store})"
    end
  end

  desc "ssh", "SSH to running test lab"
  method_option :test, :type => :boolean
  def ssh
    config.verify

    if (test_lab = Cucumber::Chef::TestLab.new(config))
      if test_lab.labs_exist?
        ip = test_lab.labs_running.first.public_ip_address
        key = File.expand_path(@config[:knife][:identity_file])
        puts("Attempting ssh connection to 'ubuntu@#{ip}' with identity '#{key}'.")
        options = [ "-i", key,
                    "-o", "UserKnownHostsFile=/dev/null",
                    "-o", "StrictHostKeyChecking=no",
                    "ubuntu@#{ip}" ]
        Kernel.exec("ssh", *options)
      else
        puts("No test labs available to ssh to!")
      end
    end
  end

  desc "connect", "Connect to a container in your test lab"
  def connect
    puts "Not implemented.  For now, find the IP of your test lab using the info task, and connect manually."
  end

  desc "displayconfig", "Display the current config from knife.rb"
  method_option :test, :type  => :boolean
  def displayconfig
    puts config.list.join("\n")
    config.verify

  rescue Cucumber::Chef::Error => err
    error(err.message)
  end

  desc "info", "Display information about the current test labs"
  method_option :test, :type  => :boolean
  def info
    config.verify
    if (test_lab = Cucumber::Chef::TestLab.new(config))
      test_lab.info
    end

  rescue Cucumber::Chef::Error => err
    error(err.message)
  end

  desc "upload <project name>", "Upload the cucumber-chef test suite <project name> to the test lab platform"
  def upload(project_name)
    project_dir = Pathname.new(".") + "cucumber-chef" + project_name
    unless File.exists?(project_dir)
      raise "Project dir '#{project_dir}' does not exist."
    end
    config.verify
    runner = Cucumber::Chef::TestRunner.new(config, project_dir)
    runner.reset_project
    runner.upload_project
  end

  desc "test <project name>", "Run the cucumber-chef test suite <project name> from a workstation."
  def test(project_name)
    project_dir = Pathname.new(".") + "cucumber-chef" + project_name
    unless File.exists?(project_dir)
      raise "Project directory '#{project_dir}' does not exist."
    else
      puts "Using project directory: #{project_dir}"
    end
    config.verify
    runner = Cucumber::Chef::TestRunner.new(config, project_dir)
    runner.run
  end
end

CucumberChef.start
