#!/usr/bin/env ruby

require 'thor'
require 'cucumber-chef'

class CucumberChef < Thor
  include Thor::Actions

  no_tasks do
    def create_directory_structure(project_dir)
      %w{step_definitions support}.each do |dir|
        FileUtils.mkdir_p(project_dir + "features" + dir)
      end
    end

    def initalize_config

      source_dir = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "cucumber", "chef", "templates", "cucumber-chef"))
      destination_dir = File.expand_path(File.join(Cucumber::Chef.locate_parent(".chef"), ".cucumber-chef"))
      FileUtils.mkdir_p(destination_dir)

      CucumberChef.source_root(source_dir)

      get_aws_credentials

      templates = {
        "config-rb.erb" => "config.rb"
      }

      templates.each do |source, destination|
        template(source, File.join(destination_dir, destination))
      end
      puts
      say "Ucanhaz Cucumber-Chef now! Rock on.", :green
    end

    def generate_project_skeleton(project_dir)
      template_dir = File.expand_path(File.join(__FILE__, "..", "..", "lib", "cucumber", "chef", "templates", "cucumber"))

      CucumberChef.source_root template_dir
      templates = {
        "readme.erb" => 'README',
        "example_feature.erb" => 'features/example.feature',
        "example_step.erb" => 'features/step_definitions/example_step.rb',
        "env.rb" => "features/support/env.rb"
      }

      templates.each do |filename, destination|
        template(filename, File.join(project_dir, destination))
      end
    end

    def load_config
      options.test? ? Cucumber::Chef::Config.test : Cucumber::Chef::Config.load
    end

    def error(message)
      warn message, :red
      exit 255
    end

    def get_aws_credentials
      say "OHAI!", :magenta
      puts
      say "Cucumber-Chef uses Amazon Web Services to build a test lab for automated infrastructure testing."
      say "I need a few details before I can set up your test lab for you."
      puts
      say "We're going to use symmetric keys to authenticate with the AWS API."
      say "First, I need your access key."
      say "Your access key identifies you as you make API calls.  It's not a secret."
      say "You can find it under 'Access Credentials', on https://aws-portal.amazon.com/gp/aws/securityCredentials"
      puts
      @aws_access_key = ask "What is your AWS Access Key?", :bold
      puts
      say "Now I need your secret access key.  This *is* a secret.  The clue's in the name."
      say "This is just a string of characters used to create the digital signature included in your API requests."
      say "You can also find this under 'Access Credentials', on https://aws-portal.amazon.com/gp/aws/securityCredentials"
      puts
      @aws_secret_access_key = ask "What is your AWS Secret Access Key?", :bold
      puts
      say "Right. Now I need to know about the ssh key pair you want to use to connect to EC2 machines."
      say "I need the name of the key pair. You can see this on the AWS management console, under Network & Security > Key Pairs"
      puts
      @aws_ssh_id = ask "What is your AWS Key Pair called?", :bold
      puts
      say "I also need to know what the ssh key is called - the actual name of the file on your local machine, eg #{@aws_ssh_id}.pem"
      puts
      @aws_ssh_key = ask "What's the filename of your ssh key?", :bold
      puts
      say "And, finally, I need to know where you keep it, on the file system. Often this is ~/.ssh"
      puts
      @aws_ssh_key_dir = ask "What directory contains your ssh key?", :bold
      puts
      say "OK, nearly there. AWS uses different keys depending on which region you use."
      say "For example, 'us-east', 'us-west', or 'eu-west'"
      puts
      @region = ask "Which region are you using?", :bold
      puts
      say "Awesome.  Thank you!"
      puts
    end
  end

################################################################################

  desc "init", "Initalize cucumber-chef configuration"
  def init
    initalize_config
  end

  desc "setup", "Setup cucumber-chef test lab in Amazon EC2"
  method_option :test, :type  => :boolean
  def setup
    load_config

    test_lab = Cucumber::Chef::TestLab.new
    server = test_lab.create

    provisioner = Cucumber::Chef::Provisioner.new(server)
    provisioner.build

    puts
    puts("Your cucumber-chef test lab has now been provisioned!")
    puts
    puts("Be sure to log into the chef-server webui and change the default credentials.")
    puts
    puts("  Chef-Server WebUI:")
    puts("    http://#{server.public_ip_address}:4040/")
    puts("  Username:")
    puts("    admin")
    puts("  Password:")
    puts("    #{Cucumber::Chef::Provisioner::PASSWORD}")
    puts

  rescue Cucumber::Chef::Error => e
    error(e.message)
  end

  desc "teardown", "Teardown cucumber-chef test lab in Amazon EC2"
  method_option :test, :type => :boolean
  def teardown
    load_config

    if yes?(set_color("Are you sure you want to teardown your cucumber-chef test lab?", :red, true))
      count_down_colors = { 5 => :green, 4 => :yellow, 3 => :yellow, 2 => :red, 1 => :red }
      puts
      puts(set_color("You have 5 seconds to abort!", :green, true))
      puts
      print(set_color("Self-destructing in", :green, true))
      5.downto(1) do |x|
        print(set_color("...#{x}", count_down_colors[x], true))
        sleep(1)
      end
      puts(set_color("...BOOM!", :red, true))
      test_lab = Cucumber::Chef::TestLab.new
      test_lab.destroy
    else
      puts(set_color("Whew! That was close!", :green, true))
    end

  rescue Cucumber::Chef::Error => e
    error(e)
  end

################################################################################

  desc "project <project name>" , "Create a project template for testing an infrastructure"
  def project(project_name)
    @project = project_name
    project_dir = File.expand_path(File.join(Dir.pwd, "cucumber-chef", @project))
    create_directory_structure(project_dir)
    generate_project_skeleton(project_dir)
    puts
    say "Project created!", :green
    say "Please look at the README in #{project_dir}, and the example features and steps, which I have autogenerated for you."
  rescue Cucumber::Chef::Error => e
    error(e)
  end

  desc "ssh", "SSH to running test lab"
  method_option :test, :type => :boolean
  def ssh
    load_config

    if (test_lab = Cucumber::Chef::TestLab.new)
      if test_lab.labs_exist?
        ssh = Cucumber::Chef::SSH.new
        ssh.config[:host] = test_lab.labs_running.first.public_ip_address
        ssh.config[:ssh_user] = "ubuntu"
        ssh.config[:identity_file] = Cucumber::Chef::Config[:aws][:identity_file]
        puts("Attempting ssh connection to '#{ssh.config[:ssh_user]}@#{ssh.config[:host]}' with identity '#{ssh.config[:identity_file]}'.")
        ssh.console
      else
        say "No test labs available to ssh to!", :red
      end
    end

  rescue Cucumber::Chef::Error => e
    error(e)
  end

  desc "connect", "Connect to a container in your test lab"
  def connect
    say "Not implemented.  For now, find the IP of your test lab using the info task, and connect manually.", :red
  end

  desc "displayconfig", "Display the current cucumber-chef config"
  method_option :test, :type  => :boolean
  def displayconfig
    load_config

    say Cucumber::Chef::Config.configuration.to_yaml, :bold

  rescue Cucumber::Chef::Error => e
    error(e.message)
  end

  desc "info", "Display information about the current test labs"
  method_option :test, :type  => :boolean
  def info
    load_config

    if (test_lab = Cucumber::Chef::TestLab.new)
      test_lab.info
    end

  rescue Cucumber::Chef::Error => err
    error(err.message)
  end

  desc "test <project name>", "Run the cucumber-chef test suite <project name> from a workstation."
  def test(project_name)
    load_config

    root_dir = Cucumber::Chef.locate_parent(".cucumber-chef")
    project_dir = File.expand_path(File.join(root_dir, "cucumber-chef", project_name))
    unless (File.exists?(project_dir) && File.directory?(project_dir))
      raise "Project directory '#{project_dir}' does not exist."
    else
      puts("Using project directory: #{project_dir}")
    end

    runner = Cucumber::Chef::TestRunner.new(project_dir)
    runner.run

  rescue Cucumber::Chef::Error => e
    error(e)
  end

end

CucumberChef.start
